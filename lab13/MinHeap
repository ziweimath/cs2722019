import java.util.ArrayList;
public class MinHeap {
	private ArrayList<Integer> heap;
	/**
	 * the no argument constructor initialize an arraylist
	 */
	public MinHeap() {
		heap = new ArrayList<Integer>();
	}
	/**
	 * get method
	 */
	public ArrayList<Integer> get(){
		return heap;
	}
	/**
	 * add method
	 * @param e the integer to be added into the heap
	 */
	public void add(int e) {
		// put the element into the heap
		heap.add(e);
		// reheap 
		int index = heap.size()-1;
		while (index !=0) {
			if (heap.get(index)>heap.get((int) Math.floor((index-1)/2))) {
				swap(index);
				index = (int)Math.floor((index-1)/2);
			}
			else return;
		}
		
	}
	private void swap(int index) {
		// TODO Auto-generated method stub
		int temp = heap.get(index);
		int pare = heap.get((int)Math.floor((index-1)/2));
		heap.set(index,pare );
		heap.set((int)Math.floor((index-1)/2), temp);
	}
	/**
	 * remove method
	 * @return the top element of the heap
	 */
	public int remove() {
		// special case: null heap
		if (heap==null || heap.isEmpty()==true) return (Integer) null;
		else {
			// get the top element of the heap;
			int top = heap.get(0);
			// move the last node onto the root;
			heap.set(0, heap.get(heap.size()-1));
			// remove the last node
			heap.remove(heap.size()-1);
			// push the out-of-place node downward
			int index = 0;
			while(heap.get(index)<heap.get(2*index+1)||heap.get(index)<heap.get(2*index+2)) {
				if (heap.get(index)<heap.get(2*index+1)) {
					swap(2*index+1);
					index = 2*index+1;
				}
				else {
					swap(2*index+2);
					index = 2*index+2;
				}
			}
		return top;
		}
	}
	
	/**
	 * top method
	 */
	public int top() {
		// special case
		if (heap==null || heap.isEmpty()==true) return (Integer) null;
		else return heap.get(0);
	}
}
