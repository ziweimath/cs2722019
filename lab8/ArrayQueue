public class ArrayQueue<E> implements QueueInterface<E>  {
	private int front;
	private int rear;
	private E[] data;
	private int num;
	
	/**
	 * Constructor
	 */
	@SuppressWarnings("unchecked")
	public ArrayQueue() {
		front = 0;
		rear = 0;
		data = (E[]) new Object[10];
		num = 0;
	}
	
	public void ensureCapacity() {
		@SuppressWarnings("unchecked")
		E[] bigArray = (E[]) new Object[2*data.length];
		for(int i = front; i<data.length;i++) {
			bigArray[i-front]=data[i];
		}
		for (int i=0;i<=rear;i++) {
			bigArray[data.length-front+i]=data[i];
		}
		data = bigArray;
		front = 0;
		rear = num-1;
	}
	
	@Override
	public void enqueue(E e) {
		if (rear==data.length) this.ensureCapacity();
		data[rear]=e;
		rear++;
		num++;
	}

	@Override
	public E dequeue() {
		// TODO Auto-generated method stub
		if (num==0) {front=rear=0;return null;}
		E answer = data[front];
		front = (front+1)%data.length;
		num--;
		return answer;
	}

	@Override
	public E front() {
		// TODO Auto-generated method stub
		if(num==0) return null;
		E answer = data[front];
		return answer;
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return num;
	}

	@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		return num==0;
	}

}
